package live2ddriver

import (
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/gin-gonic/gin"
)

type Live2DDriver interface {
	// recv textIn and generate Live2DRequest
	Drive(textIn string) Live2DRequest
}

// DriveLive2DChan do:
//
//	chIn -> text -> driver -> Live2DRequest -> chOut
//
// no blocking
func DriveLive2DChan(driver Live2DDriver, chIn <-chan string) (chOut chan<- Live2DRequest) {
	chOut = make(chan Live2DRequest, BufferSize)
	go func() {
		for textIn := range chIn {
			chOut <- driver.Drive(textIn)
		}
	}()
	return chOut
}

// DriveLive2DHTTP listen on addr and serve http request.
// Get text from request body, and return Live2DRequest as response.
// The Live2DRequest will be generated by driver. And send to chOut
// after json.Marshal.
//
// No blocking.
func DriveLive2DHTTP(driver Live2DDriver, addr string) (chOut chan []byte) {
	chOut = make(chan []byte, BufferSize)
	go func() {
		router := gin.Default()
		router.POST("/driver", func(c *gin.Context) {
			body := c.Request.Body
			defer body.Close()

			text, err := ioutil.ReadAll(body)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
				return
			}

			res := driver.Drive(string(text))

			j, err := json.Marshal(res)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
				return
			}

			chOut <- j
		})
		router.Run(addr)
	}()
	return chOut
}
